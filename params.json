{
  "name": "Appversionplugin",
  "tagline": "Manage the version of your Android App, Library and APK's.",
  "body": "Android App Version\r\n============\r\n\r\nManage the version of your Android App, Library and APK's.\r\n\r\nNobody likes to calculate new version codes. We all have written gradle tasks to do this calculation for us and then copied those tasks every time we start a new project.\r\n\r\nNow you can let the `versionCode` and `versionName` be generated for you and have your APK name match that version.\r\n\r\nJust specify the basic version information in your build file and you are done.\r\n\r\nThis plugin works with Android applications and Android libraries, everything that is described here also works for library projects/AAR files.\r\n\r\n##A simple example\r\n\r\nThe smallest example is the following.\r\n```groovy\r\nplugins {\r\n   id 'com.appsingularity.android-app-version' version '1.0.0'\r\n   id 'com.android.application'\r\n}\r\n\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   isSnapshot false\r\n}\r\n\r\nandroid {\r\n   buildToolsVersion \"23.0.2\"\r\n   compileSdkVersion 23\r\n   defaultConfig {\r\n      applicationId \"foo.bar\"\r\n      minSdkVersion 8\r\n      targetSdkVersion 23\r\n   }\r\n}\r\n```\r\n\r\nIn this example a `versionCode` with the value `1.2.3` and a `versionName` with the value `\"1.2.3\"` will\r\nbe inserted into `android.defaultConfig` and your `AndroidManifest.xml`.\r\n\r\n> If a `android.defaultConfig.versionCode` and/or `android.defaultConfig.versionName` is found then the plugin will use those values.\r\n\r\n> Notice we didn't set the versionCode and versionName in the manifest?\r\n\r\nAlso your APK will have the version in the name.\r\nIn this example your debug APK will be called `app-debug-1.2.3.apk`.\r\n\r\n\r\n>If you do specify the versionCode and versionName in your gradle build file, then the plugin will use those.\r\n\r\n## Order matters\r\n\r\nYou *have* to apply this plugin before you apply the android application or library plugin!\r\n\r\n##Build numbers\r\n\r\nIf you want to keep track of the different builds for the same version then you would use the `buildNumber` to differentiate between builds.\r\n\r\nThe next build file would be equal to specifying `versionCode 10203` and `versionName \"1.2.3.4\"`, your APK name will be `app-debug-1.2.3.4.APK`.\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   buildNumber 4\r\n   isSnapshot false\r\n}\r\n// ...\r\n```\r\n\r\n##Snapshots\r\n\r\nIf you want to have your versions flagged as snapshots, just add `isSnapshot true` to your build file. The version name and your APK will have `-SNAPSHOT` added to the name.\r\n\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   isSnapshot true\r\n}\r\n// ...\r\n```\r\n\r\n> Snapshots are enabled by default.\r\n\r\n##Release Candidates\r\n\r\nIf you want to have a version flagged as a release candidate, just add `releaseCandidate 1` to your build file. The version name and your APK will have `-RC1` added to the name.\r\nThis also works for 2, 3, 4, etc etc.\r\n\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   releaseCandidate 1\r\n}\r\n// ...\r\n```\r\n\r\n> If you use `releaseCandidate` then `isSnapshot` will be ignored.\r\n\r\n##Build types, product flavors and flavor dimensions\r\n\r\nThis plugin is aware of build types, product flavors and flavor dimensions. It will not mess up renaming your APK when you use those.\r\n\r\n##Renaming the APK\r\n\r\nThis plugins creates a copy of your APK and adds the version name to it.\r\n\r\n> Your APK will not be renamed but copied, so any existing gradle tasks (including yours) will keep working.\r\n> Renaming is enabled by default.\r\n\r\nIf you want to disable this, add `renameAPK false` to your build file\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   renameAPK false\r\n}\r\n// ...\r\n```\r\n> For libraries the renameAPK attribute is **not** renameAAR but still renameAPK.\r\n\r\n\r\n##Changing the standard behavior\r\n\r\n###Changing the version name\r\n\r\nYou have complete control over the format of the computed versionName. You can use `customVersionName` to replace the version name with any value you would like to use.\r\nSo you could use `customVersionName \"awesome\"` to end up with something like `app-debug-awesome.apk`.\r\n\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   customVersionName 'awesome'\r\n}\r\n// ...\r\n```\r\n> Only the snapshot flag/release candidate will be added to the customVersionName.\r\n\r\nMore on this in the Advanced usage section.\r\n\r\n###Keep using defaultConfig\r\n\r\nWhenever the plugin finds the normal `versionCode` and/or `versionName` in `android.defaultConfig it` will use those values. By doing this you are effectively disabling the plugin, except for renaming the APK.\r\n\r\n###Overriding the build file\r\n\r\nAll the options can also be specified and overridden via the command line, like `-PappVersion.isSnapshot=false`.\r\n\r\n> You can use the Jenkins BUILD_NUMBER to create incremental build numbers with `-PappVersion.buildNumber=$BUILD_NUMBER`\r\n\r\n\r\n##Advanced usage\r\n\r\n###Closures\r\n\r\nSometimes just specifying a static value is not enough. Luckily you can also use closures.\r\n\r\nWithin a closure you can basically do anything you want as long a you return a string that the plugin can work with.\r\n\r\n> Remember that performing long running tasks in a closure will slow down your build.\r\n\r\nIf you wrote a function that returns a GIT branch name then you could use it as follows.\r\n```groovy\r\n// ...\r\nappVersion {\r\n   majorVersion 1\r\n   minorVersion 2\r\n   patchVersion 3\r\n   isSnapshot false\r\n   customVersionName { '${version}-${functionThatReturnsBranchName()}' }\r\n}\r\n// ...\r\n```\r\n\r\nThe version name will then be `1.2.3-develop`. The `${version}` will be explained in the Variable substitution section.\r\n\r\n> Use single quotes or gradle will try to do the substitution before the plugin can.\r\n\r\n\r\n###Variable substitution\r\n\r\nWithin closures you can use variables supplied by this plugin. See the All options section for an almost complete list.\r\n\r\nOne variable that is not mentioned there is `version`, this is a read only variable that holds the version name.\r\nThis name is computed based on the `majorVersion`, `minorVersion`, `patchVersion` and `buildNumber`.\r\n\r\n##All options\r\n\r\nAll these options can be used via the command line (prefix with `appVersion.`) or in closures.\r\n\r\n| Option| Description | Type | Closure? | Overridden by |\r\n|-----|------|:----:|:--------:|:----:|\r\n| `majorVersion` | The a part of an a.b.c version. | Numeric | No | `customVersionName`  |\r\n| `minorVersion` | The b part of an a.b.c version. | Numeric | No | `customVersionName`  |\r\n| `patchVersion` | The c part of an a.b.c version. | Numeric | No | `customVersionName`  |\r\n| `buildNumber` | Adds the build number to the version name. | Numeric | No |`customVersionName` |\r\n| `isSnapshot` | Adds `-SNAPSHOT`, defaults to true. | Boolean | No | None |\r\n| `releaseCandidate` | Adds `-RCx`. | Numeric | No | None |\r\n| `renameAPK` | Should the APK be renamed? Defaults to true.| Boolean | No | None |\r\n| `customVersionName` | Replaces the a.b.c.d part of the version name.  | String | Yes | None |\r\n\r\n> The basic version name structure is as follows.\r\n`${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}-SNAPSHOT`\r\n or `${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}-RC${releaseCandidate}`\r\n>\r\n> Or `${customVersionName}-SNAPSHOT` / `${customVersionName}-RC${releaseCandidate}`\r\n\r\n\r\n#Version history\r\n\r\n1.0.0 - Initial release\r\n\r\n\r\n#License\r\n\r\n    Copyright 2016 Vince M Treur\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}